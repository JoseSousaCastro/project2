{
	"info": {
		"_postman_id": "ceac3b33-db33-41c2-b449-42f87af6e4f6",
		"name": "backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32787915",
		"_collection_link": "https://os-bate-n-avo.postman.co/workspace/project2_JLuis-JCastro-PDomingo~a97cd055-50ab-4aae-a520-dcc97e9c7d11/collection/32787742-ceac3b33-db33-41c2-b449-42f87af6e4f6?action=share&source=collection_link&creator=32787915"
	},
	"item": [
		{
			"name": "tasks",
			"item": [
				{
					"name": "Add Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"novaTask\",\r\n    \"description\": \"description\",\r\n    \"priority\": 100,\r\n    \"limitDate\": \"2024-02-25\"    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tasks/add",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tasks",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    \r",
									"pm.test(\"Status code is 204 and response body is empty\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tasks/all",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tasks",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/tasks/:Id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tasks",
								":Id"
							],
							"variable": [
								{
									"key": "Id",
									"value": "1707702770328"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "id",
								"value": "0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n        \"creationDate\": \"2024-02-10\",\r\n        \"description\": \"descrição editada\",\r\n        \"limitDate\": \"2024-12-23\",\r\n        \"priority\": 300,\r\n        \"stateId\": 300,\r\n        \"title\": \"tarefaEditada\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/tasks/:id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1707669827968"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/tasks/:id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"tasks",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1707670933424"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "testing for Task methods"
		},
		{
			"name": "User",
			"item": [
				{
					"name": "R1 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if 'username' and 'password' headers are filled\", function () {\r",
									"    // Verifica se as headers com estes nomes existem\r",
									"    pm.request.to.have.header('username');\r",
									"    pm.request.to.have.header('password');\r",
									"    \r",
									"    // buscar os values das headers\r",
									"    var username = pm.request.headers.get('username');\r",
									"    var password = pm.request.headers.get('password');\r",
									"    \r",
									"    pm.expect(username).to.not.be.empty;\r",
									"    pm.expect(password).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response for invalid credentials is  401\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/users/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "R2 - Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than  500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "teste123",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/users/logout",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "R3 - Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response for invalid credentials is  409\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify request body attributes\", function () {\r",
									" \r",
									"    const reqBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    const expectedAttributes = ['username', 'password', 'email', 'firstName', 'lastName', 'phone', 'photoURL'];\r",
									"\r",
									"    expectedAttributes.forEach(function(attribute) {\r",
									"        pm.expect(reqBody).to.have.property(attribute);\r",
									"        pm.expect(reqBody[attribute]).to.not.be.empty;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"email\": \"celso34@mail.com\",\r\n        \"firstName\": \"test\",\r\n        \"lastName\": \"21\",\r\n        \"password\": \"123\",\r\n        \"phone\": \"910000000\",\r\n        \"photoURL\": \"https://randomuser.me/api/portraits/thumb/men/72.jpg\",\r\n        \"username\": \"celso34\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/register",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "R4 - Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Email is in a valid format', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (user) {\r",
									"        pm.expect(user.email).to.be.a('string');\r",
									"        pm.expect(user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"    });\r",
									"})\r",
									"\r",
									"pm.test('Verify that \\'userTasks\\' array is present in the response', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function (user) {\r",
									"        pm.expect(user.userTasks).to.exist.and.to.be.an('array');\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/all",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "R5 - Get user by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has Content-Type header of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/:username",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "celso"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "R6 - Get user tasks list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is an array', function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"})\r",
									"\r",
									"pm.test('Validate the response content type is \\'application/json\\'', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"username\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/:username/tasks",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								":username",
								"tasks"
							],
							"variable": [
								{
									"key": "username",
									"value": "celso"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "R7 - Update user profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"All body attributes are filled\", function () {",
									"    var responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"jj@mail.com\",\r\n    \"firstName\": \"Celso\",\r\n    \"lastName\": \"Autista\",\r\n    \"password\": \"123\",\r\n    \"phone\": \"981335159\",\r\n    \"photoURL\": \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTMPl1LBYwtacjm9BVey-wYpamH_iN7jMwnUUUCp1V7NA&s\",\r\n    \"username\": \"celso\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/update/:username",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"update",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "celso"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is a string\", function () {\r",
									"    \r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody).to.be.a(\"string\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"Status code is   200 for successful request\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/getFirstName",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"getFirstName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get photo url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has Content-Type header of application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/getPhotoUrl",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								"getPhotoUrl"
							]
						}
					},
					"response": []
				},
				{
					"name": "User add task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is  401 for invalid credentials\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is  404 for missing fields\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "1234",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Primeira Task\",\r\n    \"description\": \"descrição inicial\",\r\n    \"priority\": 100,\r\n    \"startDate\": \"2024-04-18\",\r\n    \"limitDate\": \"2024-06-25\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/:username/addTask",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								":username",
								"addTask"
							],
							"variable": [
								{
									"key": "username",
									"value": "celso"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n        \"startDate\": \"2024-02-20\",\r\n        \"description\": \"descrição editada\",\r\n        \"limitDate\": \"2024-12-23\",\r\n        \"priority\": 200,\r\n        \"stateId\": 200,\r\n        \"title\": \"tarefaEditada\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/:username/:id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								":username",
								":id"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "username",
									"value": "celso"
								},
								{
									"key": "id",
									"value": "1708223998742"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update task status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "username",
								"value": "celso",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n        \"stateId\": 200\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/users/:username/tasks/:id/status",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								":username",
								"tasks",
								":id",
								"status"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "username",
									"value": "celso"
								},
								{
									"key": "id",
									"value": "1708219023867"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User remove task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "teste123",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/users/:username/:id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"users",
								":username",
								":id"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "username",
									"value": "teste123"
								},
								{
									"key": "id",
									"value": "1707999349616"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrospective",
			"item": [
				{
					"name": "Get All Retrospectives",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "jcastro",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/retrospective/all",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"retrospective",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "jcastro",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/retrospective/:id/allComments",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"retrospective",
								":id",
								"allComments"
							],
							"variable": [
								{
									"key": "id",
									"value": "1708022476770"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Retrospective",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "jcastro",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}/retrospective/:id",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"retrospective",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1708022476770"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "jcastro",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/retrospective/:id/comment/:id2",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"retrospective",
								":id",
								"comment",
								":id2"
							],
							"variable": [
								{
									"key": "id",
									"value": "1708022476770",
									"description": "1708007259993"
								},
								{
									"key": "id2",
									"value": "1708022493162",
									"description": "1708009291974"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Retrospective",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "teste123",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Ninja das Piça\",\r\n    \"date\": \"2024-03-21\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/retrospective/add",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"retrospective",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "jcastro",
								"type": "text"
							},
							{
								"key": "password",
								"value": "123",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"newComment3\",\r\n    \"user\": \"foca\",\r\n    \"commentId\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/retrospective/:id/addComment/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"retrospective",
								":id",
								"addComment",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "1708007259993"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "",
			"type": "string"
		}
	]
}